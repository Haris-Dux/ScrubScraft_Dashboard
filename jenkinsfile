pipeline {
    agent any
    
    tools {
        nodejs 'Node_JS'   
    }
    
    environment {
        DOCKER_BUILDKIT = '1'
        APP_NAME = 'scrub-admin'
        VPS_IP = '46.202.128.126'
    }
    
    stages {

        stage('Set Environment') {
            steps {
                script {
                    echo "Setting Environment"
                   def branchName = env.GIT_BRANCH?.replace('origin/', '')
                    echo "Branch name is: ${branchName}"
                    if (branchName == 'main') {
                        echo "Branch name: ${branchName}"
                         env.FRONTEND_PORT = '5173'
                         env.BACKEND_PORT = '8000'
                         env.VITE_API_URL = 'http://localhost:8000'
                    } else if (branchName == 'develop') {
                        echo "Branch name: ${branchName}"
                          error "Unrecognized branch: ${env.BRANCH_NAME}. Only main branch is supported."
                    }
                    env.DOCKER_IMAGE_FRONTEND = "${APP_NAME}:frontend-${BUILD_NUMBER}"
                    env.DOCKER_IMAGE_BACKEND = "${APP_NAME}:backend-${BUILD_NUMBER}"
                    echo "Frontend image to be configured: ${env.DOCKER_IMAGE_FRONTEND}"
                    echo "Backend image to be configured: ${env.DOCKER_IMAGE_BACKEND}"
                }
            }
        }

        stage('Verify Prerequisites') {
            steps {
                script {
                    sh '''                     
                        
                        # Ensure Docker daemon is running
                        if ! docker info >/dev/null 2>&1; then
                            echo "Docker daemon is not running. Please start Docker service."
                            exit 1
                        fi
                        
                        # Display versions for logging
                        echo "Docker version:"
                        docker --version
                        
                        echo "Node version:"
                        node --version
                        
                        echo "NPM version:"
                        npm --version
                    '''
                }
            }
        }

        
       stage('Docker Build') {
          steps {
        script {
          
                sh """
                    echo "Building Docker Images"

                       echo "Building frontend image"
                            docker build -t ${env.DOCKER_IMAGE_FRONTEND} -f frontend/Dockerfile frontend
                                
                            
                        echo "Building backend image"
                            docker build -t ${env.DOCKER_IMAGE_BACKEND} -f backend/Dockerfile backend
                               
                """
            

        }
    }
}

stage('Deploy to VPS') {
    steps {
        script {
            
                sh """

                        echo "Stopping old containers"
                        docker stop scrub-admin-frontend || true
                        docker rm scrub-admin-frontend || true
                        docker stop scrub-admin-backend || true
                        docker rm scrub-admin-backend || true

                        echo "Running new containers"
                         docker run -d --name scrub-admin-frontend -p ${FRONTEND_PORT}:80 ${env.DOCKER_IMAGE_FRONTEND}
                        sudo docker run -d --name scrub-admin-backend --env-file /root/scrubScraft/env-files/.env -p ${BACKEND_PORT}:5000 ${env.DOCKER_IMAGE_BACKEND}

                        echo "Restarting Nginx"
                         systemctl restart nginx
                    
                """
            
        }
    }
}




    }
    
    post {
        always {
            // Clean workspace
            cleanWs()
        }
        success {
            script {
                sh """
                    echo "Deployment successful!"                 
                """
            }
        }
        failure {
            script {
                sh """
                    echo "Deployment failed!"
                """
            }
        }
    }
}